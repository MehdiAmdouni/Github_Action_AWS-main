Parameters:

  EC2InstanceType:
    Description: The Instance Type Chosen for EC2
    Type: String
    
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: newkey
  
  VpcCIDR:
    Type: String
    Default: "10.0.0.0/16"

  SubnetCIDR:
    Type: String
    Default: "10.0.0.0/24"

  IGWCIDR:
    Type: String
    Default: "0.0.0.0/0"

  ImageId:
    Type: String
    Default: "ami-02e136e904f3da870"


Resources:
  # Create a VPC
  DemoVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true                       # This indicates whether the instances launched in the VPC get a DNS Hostnames
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Demo VPC

# Create an IGW

  DemoInternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: DemoVPC
    Properties:
      Tags:
        - Key: Name
          Value: Demo IGW


# Attach The IGW to the VPC

  GatewayAttachToDemoVPC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref DemoInternetGateway
      VpcId: !Ref DemoVPC

# Create Public Subnet 

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: !Ref SubnetCIDR
      MapPublicIpOnLaunch: true 
      VpcId: !Ref DemoVPC
      Tags:
        - Key: Name
          Value: Public Subnet

# Create a Public Subnet Route Table

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DemoVPC
      Tags:
        - Key: Name
          Value: Public Subnet Route Table

# Create Route to the IGW 

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachToDemoVPC
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: !Ref IGWCIDR
      GatewayId: !Ref DemoInternetGateway

# Associate the Public Subnet Route with public subnet

  PublicSubnetWithPublicSubnetRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnet

# Create an EC2 Instance  for Database

  MyDB:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref ImageId
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref SSHandHTTPSecurityGroup
      SubnetId: !Ref PublicSubnet
      InstanceType: "t2.micro"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum -y update
          sudo rpm -Uvh https://repo.mysql.com/mysql80-community-release-el7-3.noarch.rpm 
          sudo sed -i 's/enabled=1/enabled=0/' /etc/yum.repos.d/mysql-community.repo   
          sudo yum --enablerepo=mysql80-community install mysql-community-server -y
          sudo systemctl enable mysqld
          sudo systemctl start mysqld  
          mysql -e "CREATE DATABASE users;"
          mysql -e "CREATE USER admin IDENTIFIED BY 'root';"
          mysql -e "GRANT ALL PRIVILEGES ON users.* TO 'root';"
          mysql -e "FLUSH PRIVILEGES;"                
  
      Tags:
      - Key: Name
        Value: Database-Server

# Create an EC2 Instance  ami-02e136e904f3da870

  MyDemoEC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref ImageId
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref SSHandHTTPSecurityGroup
      SubnetId: !Ref PublicSubnet
      InstanceType: "t2.micro"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update
          yum -y install httpd
          systemctl start httpd
          systemctl enable httpd
          sudo yum -y install git -y 
          cd /var/www/html
          git clone https://github.com/MehdiAmdouni/form.git
          cd /var/www/html/form
          sudo cp index.html /var/www/html
          sudo cp controller.php /var/www/html
          cat index.html
      Tags:
      - Key: Name
        Value: Web-Server


# Create a Security Group

  SSHandHTTPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable Access via ports 22 and 80
      SecurityGroupIngress:
      # SSH Rule
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      # HTTP Rule
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref DemoVPC
      Tags:
        - Key: Name
          Value: Demo Security Group

    
     
  







  